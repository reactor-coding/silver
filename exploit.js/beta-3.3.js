/**
 * exploit v3.3 for Unblock filterings on Google Chrome
 * - 無断転載及び、作者情報の改ざん、クレジットの削除を禁ずる
 * - Discord Server: https://blogbooks.net/shortlinks/discord/bbs-community
 * - Website: https://blogbooks.net
 * - Github: https://github.com/blogbooks
 *
 * @author harun#9676 & 半透明のLocaler#5455 & react#1507
 * @license https://oncreative.space/project/blogbooks/exploit.js/LICENCE
 * @copyright (c) 2020-2023 BlogBooks Community
 * @version 3.3
 *
 */

if (opener && opener.location.protocol == "chrome-extension:" && opener.chrome.extension) {
	console.debug("Created By BlogBooks Developers");
	console.debug("[exploit.js v3.3]\n| Licence: https://oncreative.space/project/blogbooks/exploit.js/LICENCE\n| Version: 3.3\n| Author: BlogBooks Developers\n| Copyright: (c) 2020-2023 BlogBooks Community & Developers");
	document.write("<h2>[exploit.js v3.3]</h2>| Licence: <a href='https://oncreative.space/project/blogbooks/exploit.js/LICENCE' rel=\"nofollow noopener noreferrer\">https://oncreative.space/project/blogbooks/exploit.js/LICENCE</a><br>| Version: 3.3<br>| Author: BlogBooks Developers<br>| Copyright: (c) 2020-2023 BlogBooks Community & Developers<br><hr>");
	console.warn("Use \"Strict Mode\"");

	"use strict";

	function log(text) {
		document.write(`<div style="color: green">${text.replace("\n", "<br>")}</div>`);
		console.debug(text);
	}

	(async (chrome) => {
		try {
			log(`target: \n| Extension Name: ${chrome.runtime.getManifest().name}\n| Extension ID: ${opener.chrome.runtime.id}`);

			const { permissions, background, name } = await chrome.runtime.getManifest();
			const backgroundScripts = background.scripts;
			const { service_worker } = background;

			if (service_worker) {
				log(`Found!\n| Service Worker - Path: ${chrome.runtime.getURL(service_worker)}`);

				if (permissions.includes("webRequest")) {
					chrome.webRequest.onBeforeRequest.addListener(null, {
						urls: [
							`${chrome.runtime.getURL(service_worker)}`
						]
					}, ["blocking"]);
				}

				if (permissions.includes("scripting")) {
					let contentScripts = await chrome.scripting.getRegisteredContentScripts();

					if (contentScripts.length >= 1) {
						await chrome.scripting.unregisterContentScripts({
							"ids": [...contentScripts.map(x => x.id)]
						})
							.then(() => log("OK! Content Scriptを登録解除しました。"))
							.catch(e => new Error(`${e.message}`));

						log("| 拡張機能のexploit.js v3.3対策状態を確認します。二秒ほどお待ち下さい。(InterCLASS Filtering Serviceで対策されていたため)");

						setTimeout(async () => {
							contentScripts = await chrome.scripting.getRegisteredContentScripts();

							/**
							 * @name AutoRe-Unregister/Service-Worker
							 * @author Reactor Coding (react#1507)
							 * @description
							 * 	Auto Re-Unregister  for InterCLASS etc...
							 */

							if (contentScripts.length >= 1) {
								log("対策されていることを検知しました。Auto Re-Unregisterします。<b>拡張機能のタブとこのタブを閉じないようにブラウジングしてください<b>\n※ Auto Re-UnregisterはBeta版なため不安定です。");
								log(`log: [Auto Re-Unregister: Content Script] Enabled.\n| Created By Reactor Coding (react#1507)`);

								setInterval(async () => {
									contentScripts = await chrome.scripting.getRegisteredContentScripts();

									if (contentScripts.length >= 1) {
										await chrome.scripting.unregisterContentScripts({
											"ids": [...contentScripts.map(x => x.id)]
										})
											.catch(e => new Error(`${e.message}`));
									}
								}, 500);
							} else {
								log("問題ありませんでした。拡張機能のタブとこのタブを閉じて構いません。");
							}
						}, 2000)
					}
				} else if (backgroundScripts) {
					const backgroundPage = await chrome.extension?.getBackgroundPage();

					if (backgroundPage) {
						backgroundPage.close();
						log(`OK! ${name} のタスクを停止させました`);
					} else {
						throw new Error("拡張機能バックグラウンドページが見つかりませんでした");
					}
				} else {
					throw new Error("この拡張機能に対して使えるメソッドがありません");
				}
			}
		} catch (e) {
			console.error(e);
			document.write(`<div style="color: red">エラー: ${e}</div>`);
		}
	})(opener.chrome);
} else {
	document.write("Error: スクリプトの使用できる条件が一致しません。");
}