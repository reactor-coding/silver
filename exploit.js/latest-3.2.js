/**
 * exploit v3.2 for Unblock filterings on Google Chrome
 * - 無断転載及び、作者情報の改ざん、クレジットの削除を禁ずる
 * - Discord Server: https://blogbooks.net/shortlinks/discord/bbs-community
 * - Website: https://blogbooks.net
 * - Github: https://github.com/blogbooks
 *
 * @author harun#9676 & 半透明のLocaler#5455 & react#1507
 * @license https://oncreative.space/project/blogbooks/exploit.js/LICENCE
 * @copyright (c) 2020-2023 BlogBooks Community
 * @version 3.2
 *
 */

if (opener && opener.location.protocol == "chrome-extension:" && opener.chrome.extension) {
  console.debug("Created By BlogBooks Developers");
  console.debug("[exploit.js v3.2]\n| Licence: https://oncreative.space/project/blogbooks/exploit.js/LICENCE\n| Version: 3.2\n| Author: BlogBooks Developers\n| Copyright: (c) 2020-2023 BlogBooks Community & Developers");
  document.write("[exploit.js v3.2]| Licence: <a href='https://oncreative.space/project/blogbooks/exploit.js/LICENCE' rel=\"nofollow noopener noreferrer\">https://oncreative.space/project/blogbooks/exploit.js/LICENCE</a>| Version: 3.2| Author: BlogBooks Developers| Copyright: (c) 2020-2023 BlogBooks Community & Developers");
  console.warn("Use \"Strict Mode\"");
  
  "use strict";
  
  function log(text) {
    document.write(`<div style="color: green">${text.replace("\n", "<br>")}</div>`);
    console.debug(text);
  }
  
  try{
    log("Checking target");
    log(`target: \n| Extension Name: ${opener.chrome.runtime.getManifest().name}\n| Extension ID: ${opener.chrome.runtime.id}`);
    
    if (opener.chrome.runtime.getManifest().background.service_worker) {
      log(`Found!\n Service Worker - Path: ${opener.chrome.runtime.getURL(opener.chrome.runtime.getManifest().background.service_worker)}`);
      const permissions = opener.chrome.runtime.getManifest().permissions;

      if(permissions.some(permission => permission == "webRequest")) {
        opener.chrome.webRequest.onBeforeRequest.addListener(null ,{
          urls:[
            `${opener.chrome.runtime.getURL(opener.chrome.runtime.getManifest().background.service_worker)}`
          ]
        },["blocking"]);
        
        log(`OK! Service Worker: ${opener.chrome.runtime.getURL(opener.chrome.runtime.getManifest().background.service_worker)} をブロックしました`);
      }

      if(permissions.some(permission => permission == "scripting")) {
        if(opener.chrome.scripting.getRegisteredContentScripts().then(db => db.length >= 1)) {

          opener.chrome.scripting.getRegisteredContentScripts().then(db => {
            const ids = [...db.map(x => x.id)];

            opener.chrome.scripting.unregisterContentScripts({"ids":ids})
          })
            .then(() => log("OK! Content Scriptを登録解除しました。"))
            .catch(e=>new Error(`${e.message}`));
          
          log("| 拡張機能のexploit.js v3.2対策状態を確認します。二秒ほどお待ち下さい。(InterCLASS Filtering Serviceで対策されていたため)");
          
          setTimeout(() => {
            if(opener.chrome.scripting.getRegisteredContentScripts().then(db => db.length >= 1)) {
              log("対策されていることを検知しました。Auto Re-Unregisterします。<b>拡張機能のタブとこのタブを閉じないようにブラウジングしてください<b>");
              
              setInterval(() => {
                if(opener.chrome.scripting.getRegisteredContentScripts().then(db => db.length >= 1)) {
                  const time = new Date;

                  opener.chrome.scripting.getRegisteredContentScripts()
                    .then(db => {
                      const ids = [...db.map(x=>x.id)];
                      opener.chrome.scripting.unregisterContentScripts({
                        "ids":ids
                      })
                    })
                    .then(() => log(`[Auto Re-Unregister: Service Worker] ${time.getHours()}:${time.getMinutes()}:${time.getSeconds()}.${time.getMilliseconds()}`))
                    .catch(e => new Error(`${e.message}`))
                }
              }, 500)
            } else {
              log("問題ありませんでした。拡張機能のタブとこのタブを閉じて構いません。")
            }
          }, 2000)
        }
      }
    } else if (opener.chrome.runtime.getManifest().background.scripts) {
      if (opener.chrome.extension.getBackgroundPage()) {
        chrome.extension.getBackgroundPage().close();
        
        log(`OK! ${opener.chrome.runtime.getManifest().name} のタスクを停止させました`)
      } else {
        throw new Error("拡張機能バックグラウンドページが見つかりませんでした");
      }
    } else {
      throw new Error("この拡張機能に対して使えるメソッドがありません");
    }
  } catch(e) {
    console.error(e);
    document.write(`エラー: ${e}`);
  }
} else {
  document.write("<div style\"color: red\">Error: スクリプトの使用できる条件が一致しません。</div>");
}